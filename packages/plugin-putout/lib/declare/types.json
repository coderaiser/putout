{
    "types": "import {types} from 'putout'",
    "AnyTypeAnnotation": "const {AnyTypeAnnotation} = types",
    "ArgumentPlaceholder": "const {ArgumentPlaceholder} = types",
    "ArrayExpression": "const {ArrayExpression} = types",
    "ArrayPattern": "const {ArrayPattern} = types",
    "ArrayTypeAnnotation": "const {ArrayTypeAnnotation} = types",
    "ArrowFunctionExpression": "const {ArrowFunctionExpression} = types",
    "AssignmentExpression": "const {AssignmentExpression} = types",
    "AssignmentPattern": "const {AssignmentPattern} = types",
    "AwaitExpression": "const {AwaitExpression} = types",
    "BigIntLiteral": "const {BigIntLiteral} = types",
    "BinaryExpression": "const {BinaryExpression} = types",
    "BindExpression": "const {BindExpression} = types",
    "BlockStatement": "const {BlockStatement} = types",
    "BooleanLiteral": "const {BooleanLiteral} = types",
    "BooleanLiteralTypeAnnotation": "const {BooleanLiteralTypeAnnotation} = types",
    "BooleanTypeAnnotation": "const {BooleanTypeAnnotation} = types",
    "BreakStatement": "const {BreakStatement} = types",
    "CallExpression": "const {CallExpression} = types",
    "CatchClause": "const {CatchClause} = types",
    "ClassAccessorProperty": "const {ClassAccessorProperty} = types",
    "ClassBody": "const {ClassBody} = types",
    "ClassDeclaration": "const {ClassDeclaration} = types",
    "ClassExpression": "const {ClassExpression} = types",
    "ClassImplements": "const {ClassImplements} = types",
    "ClassMethod": "const {ClassMethod} = types",
    "ClassPrivateMethod": "const {ClassPrivateMethod} = types",
    "ClassPrivateProperty": "const {ClassPrivateProperty} = types",
    "ClassProperty": "const {ClassProperty} = types",
    "ConditionalExpression": "const {ConditionalExpression} = types",
    "ContinueStatement": "const {ContinueStatement} = types",
    "DebuggerStatement": "const {DebuggerStatement} = types",
    "DeclareClass": "const {DeclareClass} = types",
    "DeclareExportAllDeclaration": "const {DeclareExportAllDeclaration} = types",
    "DeclareExportDeclaration": "const {DeclareExportDeclaration} = types",
    "DeclareFunction": "const {DeclareFunction} = types",
    "DeclareInterface": "const {DeclareInterface} = types",
    "DeclareModule": "const {DeclareModule} = types",
    "DeclareModuleExports": "const {DeclareModuleExports} = types",
    "DeclareOpaqueType": "const {DeclareOpaqueType} = types",
    "DeclareTypeAlias": "const {DeclareTypeAlias} = types",
    "DeclareVariable": "const {DeclareVariable} = types",
    "DeclaredPredicate": "const {DeclaredPredicate} = types",
    "Decorator": "const {Decorator} = types",
    "Directive": "const {Directive} = types",
    "DirectiveLiteral": "const {DirectiveLiteral} = types",
    "DoExpression": "const {DoExpression} = types",
    "DoWhileStatement": "const {DoWhileStatement} = types",
    "EmptyStatement": "const {EmptyStatement} = types",
    "EmptyTypeAnnotation": "const {EmptyTypeAnnotation} = types",
    "EnumBooleanBody": "const {EnumBooleanBody} = types",
    "EnumBooleanMember": "const {EnumBooleanMember} = types",
    "EnumDeclaration": "const {EnumDeclaration} = types",
    "EnumDefaultedMember": "const {EnumDefaultedMember} = types",
    "EnumNumberBody": "const {EnumNumberBody} = types",
    "EnumNumberMember": "const {EnumNumberMember} = types",
    "EnumStringBody": "const {EnumStringBody} = types",
    "EnumStringMember": "const {EnumStringMember} = types",
    "EnumSymbolBody": "const {EnumSymbolBody} = types",
    "ExistsTypeAnnotation": "const {ExistsTypeAnnotation} = types",
    "ExportAllDeclaration": "const {ExportAllDeclaration} = types",
    "ExportDefaultDeclaration": "const {ExportDefaultDeclaration} = types",
    "ExportDefaultSpecifier": "const {ExportDefaultSpecifier} = types",
    "ExportNamedDeclaration": "const {ExportNamedDeclaration} = types",
    "ExportNamespaceSpecifier": "const {ExportNamespaceSpecifier} = types",
    "ExportSpecifier": "const {ExportSpecifier} = types",
    "ExpressionStatement": "const {ExpressionStatement} = types",
    "File": "const {File} = types",
    "ForInStatement": "const {ForInStatement} = types",
    "ForOfStatement": "const {ForOfStatement} = types",
    "ForStatement": "const {ForStatement} = types",
    "FunctionDeclaration": "const {FunctionDeclaration} = types",
    "FunctionExpression": "const {FunctionExpression} = types",
    "FunctionTypeAnnotation": "const {FunctionTypeAnnotation} = types",
    "FunctionTypeParam": "const {FunctionTypeParam} = types",
    "GenericTypeAnnotation": "const {GenericTypeAnnotation} = types",
    "Identifier": "const {Identifier} = types",
    "IfStatement": "const {IfStatement} = types",
    "Import": "const {Import} = types",
    "ImportAttribute": "const {ImportAttribute} = types",
    "ImportDeclaration": "const {ImportDeclaration} = types",
    "ImportDefaultSpecifier": "const {ImportDefaultSpecifier} = types",
    "ImportExpression": "const {ImportExpression} = types",
    "ImportNamespaceSpecifier": "const {ImportNamespaceSpecifier} = types",
    "ImportSpecifier": "const {ImportSpecifier} = types",
    "IndexedAccessType": "const {IndexedAccessType} = types",
    "InferredPredicate": "const {InferredPredicate} = types",
    "InterfaceDeclaration": "const {InterfaceDeclaration} = types",
    "InterfaceExtends": "const {InterfaceExtends} = types",
    "InterfaceTypeAnnotation": "const {InterfaceTypeAnnotation} = types",
    "InterpreterDirective": "const {InterpreterDirective} = types",
    "IntersectionTypeAnnotation": "const {IntersectionTypeAnnotation} = types",
    "JSXAttribute": "const {JSXAttribute} = types",
    "JSXClosingElement": "const {JSXClosingElement} = types",
    "JSXClosingFragment": "const {JSXClosingFragment} = types",
    "JSXElement": "const {JSXElement} = types",
    "JSXEmptyExpression": "const {JSXEmptyExpression} = types",
    "JSXExpressionContainer": "const {JSXExpressionContainer} = types",
    "JSXFragment": "const {JSXFragment} = types",
    "JSXIdentifier": "const {JSXIdentifier} = types",
    "JSXMemberExpression": "const {JSXMemberExpression} = types",
    "JSXNamespacedName": "const {JSXNamespacedName} = types",
    "JSXOpeningElement": "const {JSXOpeningElement} = types",
    "JSXOpeningFragment": "const {JSXOpeningFragment} = types",
    "JSXSpreadAttribute": "const {JSXSpreadAttribute} = types",
    "JSXSpreadChild": "const {JSXSpreadChild} = types",
    "JSXText": "const {JSXText} = types",
    "LabeledStatement": "const {LabeledStatement} = types",
    "LogicalExpression": "const {LogicalExpression} = types",
    "MemberExpression": "const {MemberExpression} = types",
    "MetaProperty": "const {MetaProperty} = types",
    "MixedTypeAnnotation": "const {MixedTypeAnnotation} = types",
    "ModuleExpression": "const {ModuleExpression} = types",
    "NewExpression": "const {NewExpression} = types",
    "NullLiteral": "const {NullLiteral} = types",
    "NullLiteralTypeAnnotation": "const {NullLiteralTypeAnnotation} = types",
    "NullableTypeAnnotation": "const {NullableTypeAnnotation} = types",
    "NumberLiteral": "const {NumberLiteral} = types",
    "NumberLiteralTypeAnnotation": "const {NumberLiteralTypeAnnotation} = types",
    "NumberTypeAnnotation": "const {NumberTypeAnnotation} = types",
    "NumericLiteral": "const {NumericLiteral} = types",
    "ObjectExpression": "const {ObjectExpression} = types",
    "ObjectMethod": "const {ObjectMethod} = types",
    "ObjectPattern": "const {ObjectPattern} = types",
    "ObjectProperty": "const {ObjectProperty} = types",
    "ObjectTypeAnnotation": "const {ObjectTypeAnnotation} = types",
    "ObjectTypeCallProperty": "const {ObjectTypeCallProperty} = types",
    "ObjectTypeIndexer": "const {ObjectTypeIndexer} = types",
    "ObjectTypeInternalSlot": "const {ObjectTypeInternalSlot} = types",
    "ObjectTypeProperty": "const {ObjectTypeProperty} = types",
    "ObjectTypeSpreadProperty": "const {ObjectTypeSpreadProperty} = types",
    "OpaqueType": "const {OpaqueType} = types",
    "OptionalCallExpression": "const {OptionalCallExpression} = types",
    "OptionalIndexedAccessType": "const {OptionalIndexedAccessType} = types",
    "OptionalMemberExpression": "const {OptionalMemberExpression} = types",
    "ParenthesizedExpression": "const {ParenthesizedExpression} = types",
    "PipelineBareFunction": "const {PipelineBareFunction} = types",
    "PipelinePrimaryTopicReference": "const {PipelinePrimaryTopicReference} = types",
    "PipelineTopicExpression": "const {PipelineTopicExpression} = types",
    "Placeholder": "const {Placeholder} = types",
    "PrivateName": "const {PrivateName} = types",
    "Program": "const {Program} = types",
    "QualifiedTypeIdentifier": "const {QualifiedTypeIdentifier} = types",
    "RecordExpression": "const {RecordExpression} = types",
    "RegExpLiteral": "const {RegExpLiteral} = types",
    "RegexLiteral": "const {RegexLiteral} = types",
    "RestElement": "const {RestElement} = types",
    "RestProperty": "const {RestProperty} = types",
    "ReturnStatement": "const {ReturnStatement} = types",
    "SequenceExpression": "const {SequenceExpression} = types",
    "SpreadElement": "const {SpreadElement} = types",
    "SpreadProperty": "const {SpreadProperty} = types",
    "StaticBlock": "const {StaticBlock} = types",
    "StringLiteral": "const {StringLiteral} = types",
    "StringLiteralTypeAnnotation": "const {StringLiteralTypeAnnotation} = types",
    "StringTypeAnnotation": "const {StringTypeAnnotation} = types",
    "Super": "const {Super} = types",
    "SwitchCase": "const {SwitchCase} = types",
    "SwitchStatement": "const {SwitchStatement} = types",
    "SymbolTypeAnnotation": "const {SymbolTypeAnnotation} = types",
    "TSAnyKeyword": "const {TSAnyKeyword} = types",
    "TSArrayType": "const {TSArrayType} = types",
    "TSAsExpression": "const {TSAsExpression} = types",
    "TSBigIntKeyword": "const {TSBigIntKeyword} = types",
    "TSBooleanKeyword": "const {TSBooleanKeyword} = types",
    "TSCallSignatureDeclaration": "const {TSCallSignatureDeclaration} = types",
    "TSClassImplements": "const {TSClassImplements} = types",
    "TSConditionalType": "const {TSConditionalType} = types",
    "TSConstructSignatureDeclaration": "const {TSConstructSignatureDeclaration} = types",
    "TSConstructorType": "const {TSConstructorType} = types",
    "TSDeclareFunction": "const {TSDeclareFunction} = types",
    "TSDeclareMethod": "const {TSDeclareMethod} = types",
    "TSEnumDeclaration": "const {TSEnumDeclaration} = types",
    "TSEnumMember": "const {TSEnumMember} = types",
    "TSExportAssignment": "const {TSExportAssignment} = types",
    "TSExternalModuleReference": "const {TSExternalModuleReference} = types",
    "TSFunctionType": "const {TSFunctionType} = types",
    "TSImportEqualsDeclaration": "const {TSImportEqualsDeclaration} = types",
    "TSImportType": "const {TSImportType} = types",
    "TSIndexSignature": "const {TSIndexSignature} = types",
    "TSIndexedAccessType": "const {TSIndexedAccessType} = types",
    "TSInferType": "const {TSInferType} = types",
    "TSInstantiationExpression": "const {TSInstantiationExpression} = types",
    "TSInterfaceBody": "const {TSInterfaceBody} = types",
    "TSInterfaceDeclaration": "const {TSInterfaceDeclaration} = types",
    "TSInterfaceHeritage": "const {TSInterfaceHeritage} = types",
    "TSIntersectionType": "const {TSIntersectionType} = types",
    "TSIntrinsicKeyword": "const {TSIntrinsicKeyword} = types",
    "TSLiteralType": "const {TSLiteralType} = types",
    "TSMappedType": "const {TSMappedType} = types",
    "TSMethodSignature": "const {TSMethodSignature} = types",
    "TSModuleBlock": "const {TSModuleBlock} = types",
    "TSModuleDeclaration": "const {TSModuleDeclaration} = types",
    "TSNamedTupleMember": "const {TSNamedTupleMember} = types",
    "TSNamespaceExportDeclaration": "const {TSNamespaceExportDeclaration} = types",
    "TSNeverKeyword": "const {TSNeverKeyword} = types",
    "TSNonNullExpression": "const {TSNonNullExpression} = types",
    "TSNullKeyword": "const {TSNullKeyword} = types",
    "TSNumberKeyword": "const {TSNumberKeyword} = types",
    "TSObjectKeyword": "const {TSObjectKeyword} = types",
    "TSOptionalType": "const {TSOptionalType} = types",
    "TSParameterProperty": "const {TSParameterProperty} = types",
    "TSParenthesizedType": "const {TSParenthesizedType} = types",
    "TSPropertySignature": "const {TSPropertySignature} = types",
    "TSQualifiedName": "const {TSQualifiedName} = types",
    "TSRestType": "const {TSRestType} = types",
    "TSSatisfiesExpression": "const {TSSatisfiesExpression} = types",
    "TSStringKeyword": "const {TSStringKeyword} = types",
    "TSSymbolKeyword": "const {TSSymbolKeyword} = types",
    "TSThisType": "const {TSThisType} = types",
    "TSTupleType": "const {TSTupleType} = types",
    "TSTypeAliasDeclaration": "const {TSTypeAliasDeclaration} = types",
    "TSTypeAnnotation": "const {TSTypeAnnotation} = types",
    "TSTypeAssertion": "const {TSTypeAssertion} = types",
    "TSTypeLiteral": "const {TSTypeLiteral} = types",
    "TSTypeOperator": "const {TSTypeOperator} = types",
    "TSTypeParameter": "const {TSTypeParameter} = types",
    "TSTypeParameterDeclaration": "const {TSTypeParameterDeclaration} = types",
    "TSTypeParameterInstantiation": "const {TSTypeParameterInstantiation} = types",
    "TSTypePredicate": "const {TSTypePredicate} = types",
    "TSTypeQuery": "const {TSTypeQuery} = types",
    "TSTypeReference": "const {TSTypeReference} = types",
    "TSUndefinedKeyword": "const {TSUndefinedKeyword} = types",
    "TSUnionType": "const {TSUnionType} = types",
    "TSUnknownKeyword": "const {TSUnknownKeyword} = types",
    "TSVoidKeyword": "const {TSVoidKeyword} = types",
    "TaggedTemplateExpression": "const {TaggedTemplateExpression} = types",
    "TemplateElement": "const {TemplateElement} = types",
    "TemplateLiteral": "const {TemplateLiteral} = types",
    "ThisExpression": "const {ThisExpression} = types",
    "ThisTypeAnnotation": "const {ThisTypeAnnotation} = types",
    "ThrowStatement": "const {ThrowStatement} = types",
    "TopicReference": "const {TopicReference} = types",
    "TryStatement": "const {TryStatement} = types",
    "TupleExpression": "const {TupleExpression} = types",
    "TupleTypeAnnotation": "const {TupleTypeAnnotation} = types",
    "TypeAlias": "const {TypeAlias} = types",
    "TypeAnnotation": "const {TypeAnnotation} = types",
    "TypeCastExpression": "const {TypeCastExpression} = types",
    "TypeParameter": "const {TypeParameter} = types",
    "TypeParameterDeclaration": "const {TypeParameterDeclaration} = types",
    "TypeParameterInstantiation": "const {TypeParameterInstantiation} = types",
    "TypeofTypeAnnotation": "const {TypeofTypeAnnotation} = types",
    "UnaryExpression": "const {UnaryExpression} = types",
    "UnionTypeAnnotation": "const {UnionTypeAnnotation} = types",
    "UpdateExpression": "const {UpdateExpression} = types",
    "V8IntrinsicIdentifier": "const {V8IntrinsicIdentifier} = types",
    "VariableDeclaration": "const {VariableDeclaration} = types",
    "VariableDeclarator": "const {VariableDeclarator} = types",
    "Variance": "const {Variance} = types",
    "VoidTypeAnnotation": "const {VoidTypeAnnotation} = types",
    "WhileStatement": "const {WhileStatement} = types",
    "WithStatement": "const {WithStatement} = types",
    "YieldExpression": "const {YieldExpression} = types",
    "is": "const {is} = types",
    "isAccessor": "const {isAccessor} = types",
    "isAnyTypeAnnotation": "const {isAnyTypeAnnotation} = types",
    "isArgumentPlaceholder": "const {isArgumentPlaceholder} = types",
    "isArrayExpression": "const {isArrayExpression} = types",
    "isArrayPattern": "const {isArrayPattern} = types",
    "isArrayTypeAnnotation": "const {isArrayTypeAnnotation} = types",
    "isArrowFunctionExpression": "const {isArrowFunctionExpression} = types",
    "isAssignmentExpression": "const {isAssignmentExpression} = types",
    "isAssignmentPattern": "const {isAssignmentPattern} = types",
    "isAwaitExpression": "const {isAwaitExpression} = types",
    "isBigIntLiteral": "const {isBigIntLiteral} = types",
    "isBinary": "const {isBinary} = types",
    "isBinaryExpression": "const {isBinaryExpression} = types",
    "isBindExpression": "const {isBindExpression} = types",
    "isBinding": "const {isBinding} = types",
    "isBlock": "const {isBlock} = types",
    "isBlockParent": "const {isBlockParent} = types",
    "isBlockScoped": "const {isBlockScoped} = types",
    "isBlockStatement": "const {isBlockStatement} = types",
    "isBooleanLiteral": "const {isBooleanLiteral} = types",
    "isBooleanLiteralTypeAnnotation": "const {isBooleanLiteralTypeAnnotation} = types",
    "isBooleanTypeAnnotation": "const {isBooleanTypeAnnotation} = types",
    "isBreakStatement": "const {isBreakStatement} = types",
    "isCallExpression": "const {isCallExpression} = types",
    "isCatchClause": "const {isCatchClause} = types",
    "isClass": "const {isClass} = types",
    "isClassAccessorProperty": "const {isClassAccessorProperty} = types",
    "isClassBody": "const {isClassBody} = types",
    "isClassDeclaration": "const {isClassDeclaration} = types",
    "isClassExpression": "const {isClassExpression} = types",
    "isClassImplements": "const {isClassImplements} = types",
    "isClassMethod": "const {isClassMethod} = types",
    "isClassPrivateMethod": "const {isClassPrivateMethod} = types",
    "isClassPrivateProperty": "const {isClassPrivateProperty} = types",
    "isClassProperty": "const {isClassProperty} = types",
    "isCompletionStatement": "const {isCompletionStatement} = types",
    "isConditional": "const {isConditional} = types",
    "isConditionalExpression": "const {isConditionalExpression} = types",
    "isContinueStatement": "const {isContinueStatement} = types",
    "isDebuggerStatement": "const {isDebuggerStatement} = types",
    "isDeclaration": "const {isDeclaration} = types",
    "isDeclareClass": "const {isDeclareClass} = types",
    "isDeclareExportAllDeclaration": "const {isDeclareExportAllDeclaration} = types",
    "isDeclareExportDeclaration": "const {isDeclareExportDeclaration} = types",
    "isDeclareFunction": "const {isDeclareFunction} = types",
    "isDeclareInterface": "const {isDeclareInterface} = types",
    "isDeclareModule": "const {isDeclareModule} = types",
    "isDeclareModuleExports": "const {isDeclareModuleExports} = types",
    "isDeclareOpaqueType": "const {isDeclareOpaqueType} = types",
    "isDeclareTypeAlias": "const {isDeclareTypeAlias} = types",
    "isDeclareVariable": "const {isDeclareVariable} = types",
    "isDeclaredPredicate": "const {isDeclaredPredicate} = types",
    "isDecorator": "const {isDecorator} = types",
    "isDirective": "const {isDirective} = types",
    "isDirectiveLiteral": "const {isDirectiveLiteral} = types",
    "isDoExpression": "const {isDoExpression} = types",
    "isDoWhileStatement": "const {isDoWhileStatement} = types",
    "isEmptyStatement": "const {isEmptyStatement} = types",
    "isEmptyTypeAnnotation": "const {isEmptyTypeAnnotation} = types",
    "isEnumBody": "const {isEnumBody} = types",
    "isEnumBooleanBody": "const {isEnumBooleanBody} = types",
    "isEnumBooleanMember": "const {isEnumBooleanMember} = types",
    "isEnumDeclaration": "const {isEnumDeclaration} = types",
    "isEnumDefaultedMember": "const {isEnumDefaultedMember} = types",
    "isEnumMember": "const {isEnumMember} = types",
    "isEnumNumberBody": "const {isEnumNumberBody} = types",
    "isEnumNumberMember": "const {isEnumNumberMember} = types",
    "isEnumStringBody": "const {isEnumStringBody} = types",
    "isEnumStringMember": "const {isEnumStringMember} = types",
    "isEnumSymbolBody": "const {isEnumSymbolBody} = types",
    "isExistsTypeAnnotation": "const {isExistsTypeAnnotation} = types",
    "isExportAllDeclaration": "const {isExportAllDeclaration} = types",
    "isExportDeclaration": "const {isExportDeclaration} = types",
    "isExportDefaultDeclaration": "const {isExportDefaultDeclaration} = types",
    "isExportDefaultSpecifier": "const {isExportDefaultSpecifier} = types",
    "isExportNamedDeclaration": "const {isExportNamedDeclaration} = types",
    "isExportNamespaceSpecifier": "const {isExportNamespaceSpecifier} = types",
    "isExportSpecifier": "const {isExportSpecifier} = types",
    "isExpression": "const {isExpression} = types",
    "isExpressionStatement": "const {isExpressionStatement} = types",
    "isExpressionWrapper": "const {isExpressionWrapper} = types",
    "isFile": "const {isFile} = types",
    "isFlow": "const {isFlow} = types",
    "isFlowBaseAnnotation": "const {isFlowBaseAnnotation} = types",
    "isFlowDeclaration": "const {isFlowDeclaration} = types",
    "isFlowPredicate": "const {isFlowPredicate} = types",
    "isFlowType": "const {isFlowType} = types",
    "isFor": "const {isFor} = types",
    "isForInStatement": "const {isForInStatement} = types",
    "isForOfStatement": "const {isForOfStatement} = types",
    "isForStatement": "const {isForStatement} = types",
    "isForXStatement": "const {isForXStatement} = types",
    "isFunction": "const {isFunction} = types",
    "isFunctionDeclaration": "const {isFunctionDeclaration} = types",
    "isFunctionExpression": "const {isFunctionExpression} = types",
    "isFunctionParent": "const {isFunctionParent} = types",
    "isFunctionTypeAnnotation": "const {isFunctionTypeAnnotation} = types",
    "isFunctionTypeParam": "const {isFunctionTypeParam} = types",
    "isGenericTypeAnnotation": "const {isGenericTypeAnnotation} = types",
    "isIdentifier": "const {isIdentifier} = types",
    "isIfStatement": "const {isIfStatement} = types",
    "isImmutable": "const {isImmutable} = types",
    "isImport": "const {isImport} = types",
    "isImportAttribute": "const {isImportAttribute} = types",
    "isImportDeclaration": "const {isImportDeclaration} = types",
    "isImportDefaultSpecifier": "const {isImportDefaultSpecifier} = types",
    "isImportExpression": "const {isImportExpression} = types",
    "isImportNamespaceSpecifier": "const {isImportNamespaceSpecifier} = types",
    "isImportOrExportDeclaration": "const {isImportOrExportDeclaration} = types",
    "isImportSpecifier": "const {isImportSpecifier} = types",
    "isIndexedAccessType": "const {isIndexedAccessType} = types",
    "isInferredPredicate": "const {isInferredPredicate} = types",
    "isInterfaceDeclaration": "const {isInterfaceDeclaration} = types",
    "isInterfaceExtends": "const {isInterfaceExtends} = types",
    "isInterfaceTypeAnnotation": "const {isInterfaceTypeAnnotation} = types",
    "isInterpreterDirective": "const {isInterpreterDirective} = types",
    "isIntersectionTypeAnnotation": "const {isIntersectionTypeAnnotation} = types",
    "isJSX": "const {isJSX} = types",
    "isJSXAttribute": "const {isJSXAttribute} = types",
    "isJSXClosingElement": "const {isJSXClosingElement} = types",
    "isJSXClosingFragment": "const {isJSXClosingFragment} = types",
    "isJSXElement": "const {isJSXElement} = types",
    "isJSXEmptyExpression": "const {isJSXEmptyExpression} = types",
    "isJSXExpressionContainer": "const {isJSXExpressionContainer} = types",
    "isJSXFragment": "const {isJSXFragment} = types",
    "isJSXIdentifier": "const {isJSXIdentifier} = types",
    "isJSXMemberExpression": "const {isJSXMemberExpression} = types",
    "isJSXNamespacedName": "const {isJSXNamespacedName} = types",
    "isJSXOpeningElement": "const {isJSXOpeningElement} = types",
    "isJSXOpeningFragment": "const {isJSXOpeningFragment} = types",
    "isJSXSpreadAttribute": "const {isJSXSpreadAttribute} = types",
    "isJSXSpreadChild": "const {isJSXSpreadChild} = types",
    "isJSXText": "const {isJSXText} = types",
    "isLVal": "const {isLVal} = types",
    "isLabeledStatement": "const {isLabeledStatement} = types",
    "isLet": "const {isLet} = types",
    "isLiteral": "const {isLiteral} = types",
    "isLogicalExpression": "const {isLogicalExpression} = types",
    "isLoop": "const {isLoop} = types",
    "isMemberExpression": "const {isMemberExpression} = types",
    "isMetaProperty": "const {isMetaProperty} = types",
    "isMethod": "const {isMethod} = types",
    "isMiscellaneous": "const {isMiscellaneous} = types",
    "isMixedTypeAnnotation": "const {isMixedTypeAnnotation} = types",
    "isModuleDeclaration": "const {isModuleDeclaration} = types",
    "isModuleExpression": "const {isModuleExpression} = types",
    "isModuleSpecifier": "const {isModuleSpecifier} = types",
    "isNewExpression": "const {isNewExpression} = types",
    "isNode": "const {isNode} = types",
    "isNodesEquivalent": "const {isNodesEquivalent} = types",
    "isNullLiteral": "const {isNullLiteral} = types",
    "isNullLiteralTypeAnnotation": "const {isNullLiteralTypeAnnotation} = types",
    "isNullableTypeAnnotation": "const {isNullableTypeAnnotation} = types",
    "isNumberLiteral": "const {isNumberLiteral} = types",
    "isNumberLiteralTypeAnnotation": "const {isNumberLiteralTypeAnnotation} = types",
    "isNumberTypeAnnotation": "const {isNumberTypeAnnotation} = types",
    "isNumericLiteral": "const {isNumericLiteral} = types",
    "isObjectExpression": "const {isObjectExpression} = types",
    "isObjectMember": "const {isObjectMember} = types",
    "isObjectMethod": "const {isObjectMethod} = types",
    "isObjectPattern": "const {isObjectPattern} = types",
    "isObjectProperty": "const {isObjectProperty} = types",
    "isObjectTypeAnnotation": "const {isObjectTypeAnnotation} = types",
    "isObjectTypeCallProperty": "const {isObjectTypeCallProperty} = types",
    "isObjectTypeIndexer": "const {isObjectTypeIndexer} = types",
    "isObjectTypeInternalSlot": "const {isObjectTypeInternalSlot} = types",
    "isObjectTypeProperty": "const {isObjectTypeProperty} = types",
    "isObjectTypeSpreadProperty": "const {isObjectTypeSpreadProperty} = types",
    "isOpaqueType": "const {isOpaqueType} = types",
    "isOptionalCallExpression": "const {isOptionalCallExpression} = types",
    "isOptionalIndexedAccessType": "const {isOptionalIndexedAccessType} = types",
    "isOptionalMemberExpression": "const {isOptionalMemberExpression} = types",
    "isParenthesizedExpression": "const {isParenthesizedExpression} = types",
    "isPattern": "const {isPattern} = types",
    "isPatternLike": "const {isPatternLike} = types",
    "isPipelineBareFunction": "const {isPipelineBareFunction} = types",
    "isPipelinePrimaryTopicReference": "const {isPipelinePrimaryTopicReference} = types",
    "isPipelineTopicExpression": "const {isPipelineTopicExpression} = types",
    "isPlaceholder": "const {isPlaceholder} = types",
    "isPlaceholderType": "const {isPlaceholderType} = types",
    "isPrivate": "const {isPrivate} = types",
    "isPrivateName": "const {isPrivateName} = types",
    "isProgram": "const {isProgram} = types",
    "isProperty": "const {isProperty} = types",
    "isPureish": "const {isPureish} = types",
    "isQualifiedTypeIdentifier": "const {isQualifiedTypeIdentifier} = types",
    "isRecordExpression": "const {isRecordExpression} = types",
    "isReferenced": "const {isReferenced} = types",
    "isRegExpLiteral": "const {isRegExpLiteral} = types",
    "isRegexLiteral": "const {isRegexLiteral} = types",
    "isRestElement": "const {isRestElement} = types",
    "isRestProperty": "const {isRestProperty} = types",
    "isReturnStatement": "const {isReturnStatement} = types",
    "isScopable": "const {isScopable} = types",
    "isScope": "const {isScope} = types",
    "isSequenceExpression": "const {isSequenceExpression} = types",
    "isSpecifierDefault": "const {isSpecifierDefault} = types",
    "isSpreadElement": "const {isSpreadElement} = types",
    "isSpreadProperty": "const {isSpreadProperty} = types",
    "isStandardized": "const {isStandardized} = types",
    "isStatement": "const {isStatement} = types",
    "isStaticBlock": "const {isStaticBlock} = types",
    "isStringLiteral": "const {isStringLiteral} = types",
    "isStringLiteralTypeAnnotation": "const {isStringLiteralTypeAnnotation} = types",
    "isStringTypeAnnotation": "const {isStringTypeAnnotation} = types",
    "isSuper": "const {isSuper} = types",
    "isSwitchCase": "const {isSwitchCase} = types",
    "isSwitchStatement": "const {isSwitchStatement} = types",
    "isSymbolTypeAnnotation": "const {isSymbolTypeAnnotation} = types",
    "isTSAnyKeyword": "const {isTSAnyKeyword} = types",
    "isTSArrayType": "const {isTSArrayType} = types",
    "isTSAsExpression": "const {isTSAsExpression} = types",
    "isTSBaseType": "const {isTSBaseType} = types",
    "isTSBigIntKeyword": "const {isTSBigIntKeyword} = types",
    "isTSBooleanKeyword": "const {isTSBooleanKeyword} = types",
    "isTSCallSignatureDeclaration": "const {isTSCallSignatureDeclaration} = types",
    "isTSClassImplements": "const {isTSClassImplements} = types",
    "isTSConditionalType": "const {isTSConditionalType} = types",
    "isTSConstructSignatureDeclaration": "const {isTSConstructSignatureDeclaration} = types",
    "isTSConstructorType": "const {isTSConstructorType} = types",
    "isTSDeclareFunction": "const {isTSDeclareFunction} = types",
    "isTSDeclareMethod": "const {isTSDeclareMethod} = types",
    "isTSEntityName": "const {isTSEntityName} = types",
    "isTSEnumDeclaration": "const {isTSEnumDeclaration} = types",
    "isTSEnumMember": "const {isTSEnumMember} = types",
    "isTSExportAssignment": "const {isTSExportAssignment} = types",
    "isTSExternalModuleReference": "const {isTSExternalModuleReference} = types",
    "isTSFunctionType": "const {isTSFunctionType} = types",
    "isTSImportEqualsDeclaration": "const {isTSImportEqualsDeclaration} = types",
    "isTSImportType": "const {isTSImportType} = types",
    "isTSIndexSignature": "const {isTSIndexSignature} = types",
    "isTSIndexedAccessType": "const {isTSIndexedAccessType} = types",
    "isTSInferType": "const {isTSInferType} = types",
    "isTSInstantiationExpression": "const {isTSInstantiationExpression} = types",
    "isTSInterfaceBody": "const {isTSInterfaceBody} = types",
    "isTSInterfaceDeclaration": "const {isTSInterfaceDeclaration} = types",
    "isTSInterfaceHeritage": "const {isTSInterfaceHeritage} = types",
    "isTSIntersectionType": "const {isTSIntersectionType} = types",
    "isTSIntrinsicKeyword": "const {isTSIntrinsicKeyword} = types",
    "isTSLiteralType": "const {isTSLiteralType} = types",
    "isTSMappedType": "const {isTSMappedType} = types",
    "isTSMethodSignature": "const {isTSMethodSignature} = types",
    "isTSModuleBlock": "const {isTSModuleBlock} = types",
    "isTSModuleDeclaration": "const {isTSModuleDeclaration} = types",
    "isTSNamedTupleMember": "const {isTSNamedTupleMember} = types",
    "isTSNamespaceExportDeclaration": "const {isTSNamespaceExportDeclaration} = types",
    "isTSNeverKeyword": "const {isTSNeverKeyword} = types",
    "isTSNonNullExpression": "const {isTSNonNullExpression} = types",
    "isTSNullKeyword": "const {isTSNullKeyword} = types",
    "isTSNumberKeyword": "const {isTSNumberKeyword} = types",
    "isTSObjectKeyword": "const {isTSObjectKeyword} = types",
    "isTSOptionalType": "const {isTSOptionalType} = types",
    "isTSParameterProperty": "const {isTSParameterProperty} = types",
    "isTSParenthesizedType": "const {isTSParenthesizedType} = types",
    "isTSPropertySignature": "const {isTSPropertySignature} = types",
    "isTSQualifiedName": "const {isTSQualifiedName} = types",
    "isTSRestType": "const {isTSRestType} = types",
    "isTSSatisfiesExpression": "const {isTSSatisfiesExpression} = types",
    "isTSStringKeyword": "const {isTSStringKeyword} = types",
    "isTSSymbolKeyword": "const {isTSSymbolKeyword} = types",
    "isTSThisType": "const {isTSThisType} = types",
    "isTSTupleType": "const {isTSTupleType} = types",
    "isTSType": "const {isTSType} = types",
    "isTSTypeAliasDeclaration": "const {isTSTypeAliasDeclaration} = types",
    "isTSTypeAnnotation": "const {isTSTypeAnnotation} = types",
    "isTSTypeAssertion": "const {isTSTypeAssertion} = types",
    "isTSTypeElement": "const {isTSTypeElement} = types",
    "isTSTypeLiteral": "const {isTSTypeLiteral} = types",
    "isTSTypeOperator": "const {isTSTypeOperator} = types",
    "isTSTypeParameter": "const {isTSTypeParameter} = types",
    "isTSTypeParameterDeclaration": "const {isTSTypeParameterDeclaration} = types",
    "isTSTypeParameterInstantiation": "const {isTSTypeParameterInstantiation} = types",
    "isTSTypePredicate": "const {isTSTypePredicate} = types",
    "isTSTypeQuery": "const {isTSTypeQuery} = types",
    "isTSTypeReference": "const {isTSTypeReference} = types",
    "isTSUndefinedKeyword": "const {isTSUndefinedKeyword} = types",
    "isTSUnionType": "const {isTSUnionType} = types",
    "isTSUnknownKeyword": "const {isTSUnknownKeyword} = types",
    "isTSVoidKeyword": "const {isTSVoidKeyword} = types",
    "isTaggedTemplateExpression": "const {isTaggedTemplateExpression} = types",
    "isTemplateElement": "const {isTemplateElement} = types",
    "isTemplateLiteral": "const {isTemplateLiteral} = types",
    "isTerminatorless": "const {isTerminatorless} = types",
    "isThisExpression": "const {isThisExpression} = types",
    "isThisTypeAnnotation": "const {isThisTypeAnnotation} = types",
    "isThrowStatement": "const {isThrowStatement} = types",
    "isTopicReference": "const {isTopicReference} = types",
    "isTryStatement": "const {isTryStatement} = types",
    "isTupleExpression": "const {isTupleExpression} = types",
    "isTupleTypeAnnotation": "const {isTupleTypeAnnotation} = types",
    "isType": "const {isType} = types",
    "isTypeAlias": "const {isTypeAlias} = types",
    "isTypeAnnotation": "const {isTypeAnnotation} = types",
    "isTypeCastExpression": "const {isTypeCastExpression} = types",
    "isTypeParameter": "const {isTypeParameter} = types",
    "isTypeParameterDeclaration": "const {isTypeParameterDeclaration} = types",
    "isTypeParameterInstantiation": "const {isTypeParameterInstantiation} = types",
    "isTypeScript": "const {isTypeScript} = types",
    "isTypeofTypeAnnotation": "const {isTypeofTypeAnnotation} = types",
    "isUnaryExpression": "const {isUnaryExpression} = types",
    "isUnaryLike": "const {isUnaryLike} = types",
    "isUnionTypeAnnotation": "const {isUnionTypeAnnotation} = types",
    "isUpdateExpression": "const {isUpdateExpression} = types",
    "isUserWhitespacable": "const {isUserWhitespacable} = types",
    "isV8IntrinsicIdentifier": "const {isV8IntrinsicIdentifier} = types",
    "isValidES3Identifier": "const {isValidES3Identifier} = types",
    "isValidIdentifier": "const {isValidIdentifier} = types",
    "isVar": "const {isVar} = types",
    "isVariableDeclaration": "const {isVariableDeclaration} = types",
    "isVariableDeclarator": "const {isVariableDeclarator} = types",
    "isVariance": "const {isVariance} = types",
    "isVoidTypeAnnotation": "const {isVoidTypeAnnotation} = types",
    "isWhile": "const {isWhile} = types",
    "isWhileStatement": "const {isWhileStatement} = types",
    "isWithStatement": "const {isWithStatement} = types",
    "isYieldExpression": "const {isYieldExpression} = types"
}
